import React, {useState,useEffect, useContext} from 'react'
import { Link, Redirect } from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLoacalStorage'
import { CurrentUserContext } from 'contexts/currentUser'
import BackendErrorMessages from './components/backendErrorMessages'

const Authentication = (props) => {
   
  const isLogin = props.match.path === '/login'
  const pageTitle = isLogin ? 'Sign In' : 'Sign Up'
  const descriptionLink = isLogin ? '/register' : '/login'
  const descriptionText = isLogin ? 'Need an account?' : 'Have an account'
  const apiUrl = isLogin? 'user/login' : '/users'
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
  const [{isLoading, error, response}, doFetch] = useFetch(apiUrl)
  const [token, setToken] = useLocalStorage('token')
  const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext)

  const handleSubmit = event => {
    event.preventDefault()

    const user = isLogin ? {email, password} : {email,password,username}

    doFetch({
      method: 'post',
      data: {
        user
      }
    })
  }

  useEffect(() => {
    if (!response) {
      return
    }
    setToken(response.user.token)
    setIsSuccessfullSubmit(true)
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user
    }))
  }, [response, setToken])

  if (isSuccessfullSubmit) {
    return <Redirect to="/"/>
  }
  
  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">
              {pageTitle}
            </h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            {error && <BackendErrorMessages backendErrors={error.errors} />}
            <form onSubmit={handleSubmit}>
              <fieldset>
                {!isLogin && (
                  <fieldset className="form-group">
                    <input type="text" className="form-control form-control-lg" onChange={e=> setUsername(e.target.value)} placeholder="username"/>
                  </fieldset>
                )}
                <fieldset className="form-group">
                  <input type="email" className="form-control form-control-lg" onChange={e=> setEmail(e.target.value)} placeholder="email"/>
                </fieldset>
                <fieldset className="form-group">
                  <input type="password" className="form-control form-control-lg" placeholder="password" onChange={e=> setPassword(e.target.value)}/>
                </fieldset>
                <button disabled={isLoading} className="btn btn-lg btn-primary pull-xs-right" type="submit">{pageTitle}</button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}
export default Authentication