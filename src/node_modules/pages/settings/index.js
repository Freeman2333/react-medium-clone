import React,{ useEffect, useContext, useState } from 'react'

import {CurrentUserContext} from 'contexts/currentUser'
import useFetch from 'hooks/useFetch'
import BackendErrorMessages from 'pages/authentication/components/backendErrorMessages'
import useLocalStorage from 'hooks/useLocalStorage'
import { Redirect } from 'react-router-dom'

const Settings = () => {
  const apiUrl = '/user'
  const [{ response, error }, doFetch] = useFetch(apiUrl)
  const [name, setName] = useState('');
  const [image, setImage] = useState('');
  const [bio, setBio] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [currentUserState, dispatch] = useContext(CurrentUserContext);;
  const [, setToken] = useLocalStorage();
  const [successfullLogout, setSuccessfullLogout] = useState(false);

  const handleSubmit = e => {
    e.preventDefault()
    doFetch({
      method: 'put',
      data: {
        user: {
          ...currentUserState.currentUser,
          image,
          bio,
          username: name,
          email,
          password
        }
      }
    })
  }

  const logout = e => {
    e.preventDefault()
    setToken('')
    dispatch({ type: "SET_UNAUTHORIZED" })
    setSuccessfullLogout(true)
  }

  useEffect(() => {
    if (!currentUserState.currentUser) {
      return
    }
    const currentUser = currentUserState.currentUser
    setName(currentUser.username)
    setImage(currentUser.image|| 'https://static.productionready.io/images/smiley-cyrus.jpg')
    setBio(currentUser.bio)
    setEmail(currentUser.email)
  }, [currentUserState.currentUser]);

  useEffect(() => {
    if (!response) {
      return
    }

    dispatch({type: 'SET_AUTHORIZED', payload: response.user})
  }, [response, dispatch]);

  if (successfullLogout) {
    return <Redirect to="/"/>
  }

  return (
    <div className="settings-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">Your settings</h1>
            {error && <BackendErrorMessages backendErrors={error.errors} />}
            <form onSubmit={handleSubmit}>
              <fieldset>
                <fieldset className="form-group">
                  <input type="text" className="form-control form-control-lg" placeholder="URL of profile picture" value={image} onChange={e => setImage(e.target.value)}/>
                </fieldset>
                <fieldset className="form-group">
                  <input type="text" className="form-control form-control-lg" placeholder="username" value={name} onChange={e => setName(e.target.value)}/>
                </fieldset>
                <fieldset className="form-group">
                  <textarea rows="7" value={bio} className="form-control form-control-lg" onChange={e => setBio(e.target.value)}></textarea> 
                </fieldset>
                <fieldset className="form-group">
                  <input type="email" className="form-control form-control-lg" placeholder="email" value={email} onChange={e => setName(e.target.email)}/>
                </fieldset>
                <fieldset className="form-group">
                  <input type="password" className="form-control form-control-lg" placeholder="password" value={password} onChange={e => setPassword(e.target.password)}/>
                </fieldset>
                <button className="btn btn-lg btn-primary pull-xs-right">Update settings</button>
              </fieldset>
            </form>
            <hr />
            <button className="btn btn-outline-danger" onClick={logout}>logout</button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Settings
